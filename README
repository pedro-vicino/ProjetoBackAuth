# Documentação da Estrutura de Diretórios - API Livraria

## Estrutura de Diretórios

### `database/`
- **Objetivo**: Realiza a configuração e a gestão da conexão com o banco de dados.
- **Exemplo**: Configurações de ORM ou conexões utilizando bibliotecas como `Prisma`, `TypeORM` ou `Sequelize`.

### `controllers/`
- **Objetivo**: Gerencia a interação entre as `routes`, `services` e `models`, implementando a lógica de negócios e tratando as requisições HTTP.
- **Exemplo**: Métodos como `getBooks`, `createBook`, `updateBook`, `deleteBook`.

### `migrations/`
- **Objetivo**: Scripts que são responsáveis pela criação, modificação ou exclusão de tabelas no banco de dados.
- **Exemplo**: Arquivos `.ts` para a criação da tabela `books` ou inclusão de novos campos como `price`.

### `models/`
- **Objetivo**: Define as entidades e suas estruturas de dados, assim como a interação com o banco de dados.
- **Exemplo**: Modelos de dados como `Book` e `User`, incluindo campos e suas relações.

### `helpers/`
- **Objetivo**: Contém funções utilitárias que podem ser reutilizadas em diferentes partes do código.
- **Exemplo**: Funções para formatação de datas, geração de identificadores ou validações gerais.

### `routes/`
- **Objetivo**: Define as rotas da API, associando URLs aos controladores que devem manipulá-las.
- **Exemplo**: `GET /books`, `POST /books`, `PUT /books/:id`, `DELETE /books/:id`.

### `repository/`
- **Objetivo**: Camada responsável pela interação direta com o banco de dados, realizando operações de CRUD.
- **Exemplo**: Funções como `findAllBooks`, `findBookById`, `saveBook`, `deleteBook`.


### `services/`
- **Objetivo**: Implementa a lógica de negócios, interagindo com o `repository` para manipular os dados conforme as regras da aplicação.
- **Exemplo**: Validações, como verificar se um livro já existe antes de tentar cadastrá-lo.

### `server.ts`
- **Objetivo**: Serve como ponto de entrada da aplicação, configurando o servidor, as rotas e os middlewares.
- **Exemplo**: Inicialização do servidor `Express`, configuração do `CORS` e início da escuta na porta.

### URL Base: `http://localhost:3000`

***********************************************

**Livros**

POST: Adicionar Novo Livro  
  URL: `/v2/livraria/livro`  
  Body:
{
    "title": "Título do Livro",
    "subtitle": "Subtítulo do Livro",
    "image": "URL da imagem do livro",
    "price": "Preço do livro"
}


PUT: Modificar Livro Existente
URL: `/v2/livraria/atualizar/livro/:id`
Body:
{
  "title": "Novo título",
  "subtitle": "Novo subtítulo",
  "image": "Nova URL da imagem",
  "price": "Novo preço"
}


GET: Listar Todos os Livros
URL: `/v2/livraria/livros`
Resposta:
{
  "books": [
    {
      "title": "Título do Livro",
      "subtitle": "Subtítulo do Livro",
      "image": "URL da imagem do livro",
      "price": "Preço do livro"
    },
    ...
  ]
}


GET: Buscar Livro por ID
URL: `/v2/livraria/livros/:id`
Resposta:
{
  "books": [
    {
      "title": "Título do Livro",
      "subtitle": "Subtítulo do Livro",
      "image": "URL da imagem do livro",
      "price": "Preço do livro"
    }
  ]
}
DELETE: Remover Livro
URL: `/v2/livraria/excluir/livro/:id`

***********************************************

**Usuários**

POST: Criar Novo Usuário
URL: /register
Body:
{
  "email": "usuario@dominio.com",
  "password": "senha_secreta",
  "name": "Nome do Usuário"
}


POST: Autenticar Usuário
URL: /login
Body:
{
  "email": "usuario@dominio.com",
  "password": "senha_secreta"
}

***********************************************

Como Executar o Projeto

**Backend**:
Acesse a pasta API.
Execute o seguinte comando para instalar as dependências:
npm install

Inicie o servidor com:
npm start

**Frontend**:
Acesse a pasta admin.
Se estiver usando o Visual Studio Code, utilize o plugin Live Server.
Inicie o frontend com o Live Server.

Observações Importantes:
Cadastro e Login: Após iniciar o projeto, crie uma conta através do endpoint de registro e realize o login antes de usar a aplicação.

Pedro Henrique Vicino: 54289
